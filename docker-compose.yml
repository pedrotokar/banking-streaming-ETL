services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  broker:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - broker_data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPERCONNECT: zookeeper:2181
    depends_on:
      - broker

  producer:
    build: ./containers/producer
    container_name: producer
    volumes:
      - ./containers/producer:/app
      - ./data:/app/data
    depends_on:
      - broker
    environment:
      PYTHONUNBUFFERED: 1
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
    restart: unless-stopped
  
  spark-etl:
    build: ./containers/spark-etl
    container_name: spark-etl
    depends_on:
      - broker
      - producer
      - redis
    volumes:
      - ./containers/spark-etl:/app
      - ./data:/app/data
      - spark_checkpoint:/tmp/spark_checkpoint
    environment:
      PYTHONUNBUFFERED: 1
      SPARK_MODE: standalone
      REDIS_HOST: redis
      REDIS_PORT: 6379
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: bank_db_postgres
    environment:
      POSTGRES_USER: bank_etl
      POSTGRES_PASSWORD: ihateavroformat123
      POSTGRES_DB: bank
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped


  # servi√ßo que faz o populate inicial
  db-seed:
    build: ./containers/db-seed   
    container_name: db_seed
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PYTHONUNBUFFERED: 1
      DB_HOST: postgres 
      DB_PORT: 5432
      DB_NAME: bank
      DB_USER: bank_etl
      DB_PASS: ihateavroformat123
    restart: "no"           



volumes:
  postgres_data:
    driver: local
  zookeeper_data:
    driver: local
  broker_data:
    driver: local
  spark_checkpoint:
    driver: local
